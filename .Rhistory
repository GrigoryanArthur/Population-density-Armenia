library(sf)
install.packages("sf")
install.packages("tigris")
install.packages("tidyverse")
install.packages("stars")
install.packages("MetBrewer")
install.packages("colorspace")
library(sf)
library(tigris)
library(tidyverse)
library(stars)
library(rayshader)
library(MetBrewer)
library(colorspace)
library(rayshader)
data <- st_read("data/kontur_population_US_20220630.gpkg")
data <- st_read("data/kontur_population_AM_20220630.gpkg")
st <- states()
View(data)
View(data[[3]][[11]])
data[[3]][[11]][[1]]
View(data[[3]][[8]])
data[[3]][[8]][[1]]
data[6]
data[[2]]
data[[2][3]]
data[[2]][[3]]
data[[3]][[3]]
data[[1]][[3]]
data[[3]][[8]]
data[[3]][[8]][[1]]
data[[3]][[8]][[2]]
data <- st_read("kontur_population_US_20220630.gpkg")
library(sf)
library(tigris)
library(tidyverse)
library(stars)
library(rayshader)
library(MetBrewer)
library(colorspace)
data <- st_read("data/kontur_population_US_20220630.gpkg")
View(data)
st <- states()
library(tigris)
states()
states
install.packages("tigris")
install.packages("tigris")
library(sf)
library(tigris)
library(tidyverse)
library(stars)
library(rayshader)
library(MetBrewer)
library(colorspace)
data <- st_read("data/kontur_population_US_20220630.gpkg")
st <- states()
st_drivers()
data <- st_read("data/kontur_population_AM_20220630.gpkg")
bb <- st_bbox(data)
bottom_left <- st_point(c(bb[["xmin"]], bb[["ymin"]]))
bottom_right <- st_point(c(bb[["xmax"]], bb[["ymin"]]))
data |>
ggplot() +
geom_sf() +
geom_sf(data = bottom_left) +
geom_sf(data = bottom_right, color = "red")
bottom_left <- st_point(c(bb[["xmin"]], bb[["ymin"]])) |>
st_sfc(crs = st_crs(data))
bottom_right <- st_point(c(bb[["xmax"]], bb[["ymin"]])) |>
st_sfc(crs = st_crs(data))
data |>
ggplot() +
geom_sf() +
geom_sf(data = bottom_left) +
geom_sf(data = bottom_right, color = "red")
width <- st_distance(bottom_left, bottom_right)
top_left <- st_point(c(bb[["xmin"]], bb[["ymax"]])) |>
st_sfc(crs = st_crs(data))
height <- st_distance(bottom_left, top_left)
if (width > height) {
w_ratio <- 1
h_ratio <- height / width
} else {
h_ration <- 1
w_ratio <- width / height
}
size <- 5000
data_rast <- st_rasterize(data,
nx = floor(size * w_ratio),
ny = floor(size * h_ratio))
if (width > height) {
w_ratio <- 1
h_ratio <- height / width
} else {
h_ration <- 1
w_ratio <- width / height
}
width > height
if (width > height) {
w_ratio <- 1
h_ratio <- height / width
} else {
h_ratio <- 1
w_ratio <- width / height
}
size <- 5000
data_rast <- st_rasterize(data,
nx = floor(size * w_ratio),
ny = floor(size * h_ratio))
size * w_ratio
size * h_ratio
floor(size * w_ratio)
View(top_left)
floor(size * w_ratio)
nx
st_rasterize()
st_rasterize(data)
data_rast <- st_rasterize(data,
nx = floor(size * w_ratio),
ny = floor(size * h_ratio))
data_rast <- st_rasterize(data,
nx = floor(size * w_ratio),
ny = floor(size * h_ratio),
units_options(allow_mixed = TRUE))
data_rast <- st_rasterize(data,
nx = floor(size * w_ratio),
ny = floor(size * h_ratio),
units_options(allow_mixed = TRUE)?)
data_rast <- st_rasterize(data)#,
View(data_rast)
data_rast[["population"]]
mat <- matrix(data_rast$population,
nrow = floor(size * w_ratio),
ncol = floor(size * h_ratio))
View(mat)
install.packages("languageserver")
